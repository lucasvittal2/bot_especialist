name: Composer Sync & Docker Build DEV

on:
  pull_request:
    branches:
      - dev
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

  push:
    branches:
      - update-deploy-workflow

env:
  ENVIRONMENT: "dev"
  BEAM_VERSION: "2.59.0"
  BEAM_IMAGE: "apache/beam_python3.11_sdk"
  VERSION_FILE: 'src/bot_especialist/__init__.py'
  PYTHON_IMAGE: "python:3.9"
  DAG_ID: "testing_pipeline"
  COMPOSER_ENV: "ingestion-pipeline"
  GCP_PROJECT_ID : "680560386191"
  REPO_BUCKET_NAME: "pdf-repository-dev-680560386191"
  GCP_REGION: "us-central1"
  GCP_LOCATION: "US"
  ALLOY_DB_INSTANCE_NAME: "cluster-us-central1"
  APP_NAME: "testing-dev"
  APP_LISTEN_PORT: "8090"
  DIALOGUE_DB_NAME: "dialogue-database"
  FEEDBACK_DB_NAME: "feedback-database"

jobs:
  environment-sync:
    runs-on: self-hosted
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{  github.ref  }}
          fetch-depth: 0

      - name: Set Package Version
        id: set_version
        uses: ./.github/actions/set-version
        with:
          FILE_PATH: ${{  env.VERSION_FILE  }}

      - name: Gcloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{  secrets.GCP_CREDENTIALS  }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set Workflow Variables
        uses: ./.github/actions/set-env-vars
        with:
          VERSION: ${{  steps.set_version.outputs.VERSION  }}
          ENVIRONMENT: ${{  env.ENVIRONMENT  }}

  docker-build:
    needs: environment-sync
    runs-on: self-hosted
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{  github.ref  }}
          fetch-depth: 0

      - name: Set Package Version
        id: set_version
        uses: ./.github/actions/set-version
        with:
          FILE_PATH: ${{  env.VERSION_FILE  }}

      - name: Install dependencies
        id: poetry_install
        uses: ./.github/actions/poetry-install

      - name: Gcloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{  secrets.GCP_CREDENTIALS  }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set Workflow Variables
        uses: ./.github/actions/set-env-vars
        with:
          VERSION: ${{  steps.set_version.outputs.VERSION  }}
          ENVIRONMENT: ${{  env.ENVIRONMENT  }}

      - name: Check App functions with unit tests
        id: check_functionalities
        uses: ./.github/actions/run-unit-tests

      - name: Docker Build & Push
        uses: ./.github/actions/docker-build-push
        with:
          BEAM_IMAGE: ${{  env.BEAM_IMAGE  }}
          BEAM_VERSION: ${{  env.BEAM_VERSION  }}


  environment-setup:
    needs: docker-build
    runs-on: acer-Aspire-A315-23
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{  github.ref  }}
          fetch-depth: 0

      - name: Set Package Version
        id: set_version
        uses: ./.github/actions/set-version
        with:
          FILE_PATH: ${{  env.VERSION_FILE  }}

      - name: Gcloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{  secrets.GCP_CREDENTIALS  }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Provisioning GCP Resources
        run: |
          PROJECT_PATH=$(pwd)
          cd terraform/environments/${{ env.ENVIRONMENT }}
          terraform init
          terraform plan
          echo y | terraform apply
          cd $PROJECT_PATH

      - name: Upload Dependencies to GCP
        run: |
          echo "Uploading DAGs scripts to GCS DAGs path
          DAGS_FOLDER=$(terraform output dags_bucket_folder")
          gcloud storage cp -r "src/bot_especialist/pipelines/airflow/DAGs" $DAGS_FOLDER
          if [#$ -eq 0]; then
          echo "Uploading done successfully !"
          else
          echo "Something went wrong, check logs above."
          fi

  heath-checks:
    needs: environment-setup
    runs-on: acer-Aspire-A315-23
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{  github.ref  }}
          fetch-depth: 0

      - name: Set Package Version
        id: set_version
        uses: ./.github/actions/set-version
        with:
          FILE_PATH: ${{  env.VERSION_FILE  }}

      - name: Gcloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{  secrets.GCP_CREDENTIALS  }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Check if GCS Document repository were created
        run: |
          BUCKET_NAME=${{ env.REPO_BUCKET_NAME }}
          BUCKET_EXISTS=$(gcloud storage buckets list --filter=$BUCKET_NAME --format="value(name)")
          if [ "$BUCKET_EXISTS" == "$BUCKET_NAME" ]; then
              echo "Bucket '$BUCKET_NAME' exists."
          else
              echo "Bucket '$BUCKET_NAME' does not exist or has not been created."
              exit 1
          fi

      - name: Check pipeline triggering on composer
        run: |
          DAG_ID=${{ env.DAG_ID }}
          ENVIRONMENT=${{ env.COMPOSER_ENV }}
          echo "Checking the status of DAG: $DAG_ID..."

          # Fetch the list of running tasks for the specified DAG
          STATUS=$(gcloud composer environments run "$ENVIRONMENT" \
            --location "${{ env.GCP_LOCATION }}" list_dag_runs \
            --project "$PROJECT_ID" \
            --format="json" \
            | jq -r ".[] | select(.dag_id == \"$DAG_ID\") | .state")

          # Check if the DAG is running
          if [[ "$STATUS" == "running" ]]; then
            echo "The DAG '$DAG_ID' is currently running."
          else
            echo "The DAG '$DAG_ID' is NOT running. Current state: $STATUS"
          fi
            - name: Check pipeline triggering on composer

      - name: Check if alloyDB were created
        run: |
          INSTANCE_NAME=${{ env.ALLOY_DB_INSTANCE_NAME }}
          REGION=${{ env.GCP_REGION }}
          PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          echo "Checking if AlloyDB instance '$INSTANCE_NAME' exists in region '$REGION'..."

            # List instances and filter by name
            EXISTS=$(gcloud alloydb instances list \
              --project="$PROJECT_ID" \
              --region="$REGION" \
              --format="value(name)" \
              | grep -w "$INSTANCE_NAME")

            if [[ -n "$EXISTS" ]]; then
              echo "AlloyDB instance '$INSTANCE_NAME' exists."
            else
              echo "AlloyDB instance '$INSTANCE_NAME' does NOT exist."
            fi

      - name: Check if API Container were deployed on Cloud run
        run: |
          PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          SERVICE_NAME=${{ env.APP_NAME }}
          REGION=${{ env.GCP_REGION }}

          # List Cloud Run services and filter by the specified service name
           EXISTS=$(gcloud run services list \
             --project="$PROJECT_ID" \
             --region="$REGION" \
             --format="value(metadata.name)" \
             | grep -w "$SERVICE_NAME")

           if [[ -n "$EXISTS" ]]; then
             echo "Cloud Run service '$SERVICE_NAME' exists and is deployed."
           else
             echo "Cloud Run service '$SERVICE_NAME' does NOT exist or is not deployed."
           fi

      - name: Check if API Container is reachable
        run: |
          URL="https://${{ env.APP_NAME }}-${{ env.GCP_PROJECT_ID }}.${{ env.GCP_REGION }}.run.app:{{ env.APP_LISTEN_PORT }}/bot-especialist/answer_query"
          BODY='{"query": "What is the capital of France?"}'

          # Make the curl request and capture the HTTP status code
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL")

          # Check if the status code is 200
          if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Request successful. Status code: 200"
          else
              echo "Request failed. Status code: $HTTP_STATUS"
          fi

      - name: Check if Dialogue Database were created
        run: |
          DATABASE_NAME=${{ env.DIALOGUE_DB_NAME }}
          DATABASE_EXISTS=$(gcloud sql instances list --filter="name=$DATABASE_NAME" --format="value(name)")

          if [ "DATABASE_EXISTS" == "$DATABASE_NAME" ]; then
              echo "Cloud SQL instance '$DATABASE_NAME' exists."
          else
              echo "Cloud SQL instance '$DATABASE_NAME' does not exist."
          fi

      - name: Check if Feedback Database were created
        run: |
          DATABASE_NAME=${{ env.FEEDBACK_DB_NAME }}
          DATABASE_EXISTS=$(gcloud sql instances list --filter="name=$DATABASE_NAME" --format="value(name)")

          if [ "DATABASE_EXISTS" == "$DATABASE_NAME" ]; then
              echo "Cloud SQL instance '$DATABASE_NAME' exists."
          else
              echo "Cloud SQL instance '$DATABASE_NAME' does not exist."
          fi
